import traceback
import sys
import os

try:
    import pandas as pd
    from langchain_chroma import Chroma
    from langchain_huggingface import HuggingFaceEmbeddings
    import chromadb

    print("üöÄ B·∫Øt ƒë·∫ßu sync d·ªØ li·ªáu v√†o ChromaDB...")

    # ‚úÖ ƒê·∫£m b·∫£o file CSV t·ªìn t·∫°i
    csv_path = "product_data.csv"
    if not os.path.exists(csv_path):
        raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y file {csv_path}")

    # ‚úÖ Kh·ªüi t·∫°o embedding & vectorstore
    print("üîß Kh·ªüi t·∫°o embedding v√† Chroma client...")
    embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")

    persist_path = "/tmp/chroma_db"
    os.makedirs(persist_path, exist_ok=True)

    chroma_client = chromadb.PersistentClient(path=persist_path)
    vectorstore = Chroma(
        collection_name="products",
        embedding_function=embedding_model,
        client=chroma_client
    )

    # ‚úÖ ƒê·ªçc d·ªØ li·ªáu
    print("‚ú® ƒêang ƒë·ªçc file CSV...")
    df = pd.read_csv(csv_path)

    print("üìä ƒêang t·∫°o embedding v√† metadata...")
    documents, metadatas = [], []
    for _, row in df.iterrows():
        name = row['product_variant_name']
        color = row['color_name']
        memory = row['memory_name']
        price = row.get('price', 'Kh√¥ng r√µ')
        status = row['product_variant_status']
        attributes = row['attributes']

        text = f"{name}. M√†u: {color}. RAM: {memory}. Gi√°: {price}. Tr·∫°ng th√°i: {status}. Thu·ªôc t√≠nh: {attributes}"
        documents.append(text)
        metadatas.append({
            "ProductName": name,
            "Color": color,
            "Memory": memory,
            "Price": price,
            "Status": status,
            "Attributes": attributes,
            "text": text
        })

    print("üíæ ƒêang th√™m v√†o vectorstore...")
    vectorstore.add_texts(texts=documents, metadatas=metadatas)

    print("‚úÖ ƒê√£ sync xong v√†o ChromaDB!")

except Exception:
    print("‚ùå L·ªói trong chroma_sync.py:")
    traceback.print_exc()
    sys.exit(1)

# import pandas as pd
# from langchain_chroma import Chroma
# from langchain_huggingface import HuggingFaceEmbeddings
# import chromadb

# # File d·ªØ li·ªáu
# csv_path = "product_data.csv"

# # M√¥ h√¨nh embedding
# embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
# chroma_client = chromadb.PersistentClient(path="./chroma_db")

# vectorstore = Chroma(
#     collection_name="products",
#     embedding_function=embedding_model,
#     client=chroma_client
# )

# def convert_color(color):
#     if not isinstance(color, str):
#         return "Kh√¥ng r√µ"
#     c = color.strip().lower()
#     return {
#         "black": "ƒêen",
#         "white": "Tr·∫Øng",
#         "blue": "Xanh",
#         "purple": "T√≠m",
#         "silver": "B·∫°c",
#         "green": "Xanh l√°",
#         "yellow": "V√†ng",
#         "red": "ƒê·ªè",
#     }.get(c, color)


# def convert_status(status):
#     if not isinstance(status, str):
#         return "Kh√¥ng r√µ"
#     return {
#         "AVAILABLE": "C√≤n h√†ng",
#         "OUT_OF_STOCK": "H·∫øt h√†ng",
#         "DISCONTINUED": "Ng·ª´ng b√°n"
#     }.get(status.upper(), status)


# print("‚ú® ƒêang t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m...")
# df = pd.read_csv(csv_path)

# print("üìä ƒêang x·ª≠ l√Ω embedding v√† ƒë∆∞a v√†o ChromaDB...")
# documents, metadatas = [], []
# for _, row in df.iterrows():
#     name = row['product_variant_name']
#     color_en = str(row['color_name'])
#     color_vi = convert_color(color_en)

#     memory = row['memory_name']
#     price = row.get('price', 'Kh√¥ng r√µ')
#     status_en = row['product_variant_status']
#     status_vi = convert_status(status_en)

#     attributes = row['attributes']

#     text = f"{name}. M√†u: {color_vi}. RAM: {memory}. Gi√°: {price}. Tr·∫°ng th√°i: {status_vi}. Thu·ªôc t√≠nh: {attributes}"
#     documents.append(text)
#     metadatas.append({
#         "ProductName": name,
#         "Color": color_vi,
#         "Memory": memory,
#         "Price": price,
#         "Status": status_vi,
#         "Attributes": attributes,
#         "text": text
#     })

# vectorstore.add_texts(texts=documents, metadatas=metadatas)

# print("‚úÖ Ho√†n t·∫•t ƒë·ªìng b·ªô v√†o ChromaDB!")
